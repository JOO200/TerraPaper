From 3fcf01ec6a8389ae8a014e9067a60f214690d7ec Mon Sep 17 00:00:00 2001
From: JOO200 <github@joo200.de>
Date: Fri, 27 Mar 2020 14:44:02 +0100
Subject: [PATCH] Reduce entity tracker updates on move

---
 .../destroystokyo/paper/PaperWorldConfig.java |  5 ++
 .../net/minecraft/server/EntityPlayer.java    |  4 ++
 .../net/minecraft/server/PlayerChunkMap.java  | 62 ++++++++++++++++++-
 3 files changed, 70 insertions(+), 1 deletion(-)

diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 7ca67a4aa..1794daa9e 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -664,6 +664,11 @@ public class PaperWorldConfig {
         nerfNetherPortalPigmen = getBoolean("game-mechanics.nerf-pigmen-from-nether-portals", nerfNetherPortalPigmen);
     }
 
+    public double trackerUpdateDistance = 1;
+    private void trackerUpdateDistance() {
+        trackerUpdateDistance = getDouble("tracker-update-distance", trackerUpdateDistance);
+    }
+
     public double zombieVillagerInfectionChance = -1.0;
     private void zombieVillagerInfectionChance() {
         zombieVillagerInfectionChance = getDouble("zombie-villager-infection-chance", zombieVillagerInfectionChance);
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index e7bfbc330..f9a70540d 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -86,6 +86,10 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public final int[] mobCounts = new int[ENUMCREATURETYPE_TOTAL_ENUMS]; // Paper
     public final com.destroystokyo.paper.util.PooledHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> cachedSingleMobDistanceMap;
     // Paper end
+    // TerraPaper start - Reduce entity tracker updates on move
+    public Vec3D lastTrackedPosition = new Vec3D(0, 0, 0);
+    public long lastTrackedTick;
+    // TerraPaper end
 
     // CraftBukkit start
     public String displayName;
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 57bea926a..d8b72b249 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -135,6 +135,38 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     // Paper end
 
+    // TerraPaper start - Reduce entity tracker updates on move
+     private double trackerUpdateDistanceSquared;
+    private final Int2ObjectMap<Int2ObjectMap<PlayerChunkMap.EntityTracker>> playerTrackedEntities = new Int2ObjectOpenHashMap();
+    private final Int2ObjectMap<Queue<Integer>> playerTrackedEntitiesRemoveQueue = new Int2ObjectOpenHashMap();
+
+    void flushRemoveQueue(EntityPlayer entityplayer) {
+        Queue<Integer> removeQueue = getPlayerTrackedEntityMapRemoveQueue(entityplayer.getId());
+        Int2ObjectMap<PlayerChunkMap.EntityTracker> entityMap = getPlayerTrackedEntityMap(entityplayer.getId());
+        for (Integer id = removeQueue.poll(); id != null; id = removeQueue.poll()) {
+                entityMap.remove(id);
+            }
+    }
+
+    void flushRemoveQueues() {
+        for (Int2ObjectMap.Entry<Queue<Integer>> entry : playerTrackedEntitiesRemoveQueue.int2ObjectEntrySet()) {
+                Int2ObjectMap entityMap = getPlayerTrackedEntityMap(entry.getKey());
+                Queue<Integer> removeQueue = entry.getValue();
+                for (Integer id = removeQueue.poll(); id != null; id = removeQueue.poll()) {
+                        entityMap.remove(id);
+                    }
+            }
+    }
+
+    Int2ObjectMap getPlayerTrackedEntityMap(int id) {
+        return playerTrackedEntities.computeIfAbsent(id, i -> new Int2ObjectOpenHashMap());
+    }
+
+    Queue<Integer> getPlayerTrackedEntityMapRemoveQueue(int id) {
+        return playerTrackedEntitiesRemoveQueue.computeIfAbsent(id, i -> new java.util.ArrayDeque<>());
+    }
+    // TerraPaper end
+
     public PlayerChunkMap(WorldServer worldserver, File file, DataFixer datafixer, DefinedStructureManager definedstructuremanager, Executor executor, IAsyncTaskHandler<Runnable> iasynctaskhandler, ILightAccess ilightaccess, ChunkGenerator<?> chunkgenerator, WorldLoadListener worldloadlistener, Supplier<WorldPersistentData> supplier, int i) {
         super(new File(worldserver.getWorldProvider().getDimensionManager().a(file), "region"), datafixer);
         this.visibleChunks = this.updatingChunks.clone();
@@ -167,6 +199,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         this.m = new VillagePlace(new File(this.w, "poi"), datafixer, this.world); // Paper
         this.setViewDistance(i);
         this.playerMobDistanceMap = this.world.paperConfig.perPlayerMobSpawns ? new com.destroystokyo.paper.util.PlayerMobDistanceMap() : null; // Paper
+        this.trackerUpdateDistanceSquared = Math.pow(this.world.paperConfig.trackerUpdateDistance, 2); // TerraPaper
     }
 
     public void updatePlayerMobTypeMap(Entity entity) {
@@ -1334,7 +1367,19 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     }
 
     public void movePlayer(EntityPlayer entityplayer) {
-        ObjectIterator objectiterator = this.trackedEntities.values().iterator();
+        // TerraPaper start
+        // ObjectIterator objectiterator = this.trackedEntities.values().iterator();
+        ObjectIterator objectiterator;
+
+        if(MinecraftServer.currentTick - entityplayer.lastTrackedTick >= 20
+            || entityplayer.lastTrackedPosition.distanceSquared(entityplayer.getPositionVector()) >= trackerUpdateDistanceSquared) {
+            entityplayer.lastTrackedPosition = entityplayer.getPositionVector();
+            entityplayer.lastTrackedTick = MinecraftServer.currentTick;
+            objectiterator = this.trackedEntities.values().iterator(); // Update all entity trackers
+        } else {
+            objectiterator = getPlayerTrackedEntityMap(entityplayer.getId()).values().iterator(); // Only update entity trackers for already tracked entities
+        }
+        // TerraPaper end
 
         while (objectiterator.hasNext()) {
             PlayerChunkMap.EntityTracker playerchunkmap_entitytracker = (PlayerChunkMap.EntityTracker) objectiterator.next();
@@ -1345,6 +1390,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 playerchunkmap_entitytracker.updatePlayer(entityplayer);
             }
         }
+        flushRemoveQueues(); // TerraPaper
 
         int i = MathHelper.floor(entityplayer.locX()) >> 4;
         int j = MathHelper.floor(entityplayer.locZ()) >> 4;
@@ -1486,12 +1532,21 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
                 playerchunkmap_entitytracker.clear(entityplayer);
             }
+            // TerraPaper start
+            playerTrackedEntities.remove(entityplayer.getId());
+            playerTrackedEntitiesRemoveQueue.remove(entityplayer.getId());
+            // TerraPaper end
         }
 
         PlayerChunkMap.EntityTracker playerchunkmap_entitytracker1 = (PlayerChunkMap.EntityTracker) this.trackedEntities.remove(entity.getId());
 
         if (playerchunkmap_entitytracker1 != null) {
             playerchunkmap_entitytracker1.a();
+            // TerraPaper start
+            for (EntityPlayer player : playerchunkmap_entitytracker1.trackedPlayers) {
+                getPlayerTrackedEntityMap(player.getId()).remove(playerchunkmap_entitytracker1.tracker.getId());
+            }
+            // TerraPaper end
         }
         entity.tracker = null; // Paper - We're no longer tracked
     }
@@ -1532,6 +1587,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             }
             world.timings.tracker2.stopTiming(); // Paper
         }
+        flushRemoveQueues();
 
 
     }
@@ -1581,6 +1637,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 }
             }
         }
+        flushRemoveQueue(entityplayer); // TerraPaper
 
         Iterator iterator;
         Entity entity1;
@@ -1677,6 +1734,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             org.spigotmc.AsyncCatcher.catchOp("player tracker clear"); // Spigot
             if (this.trackedPlayers.remove(entityplayer)) {
                 this.trackerEntry.a(entityplayer);
+                getPlayerTrackedEntityMap(entityplayer.getId()).remove(this.tracker.getId()); // TerraPaper
             }
 
         }
@@ -1713,9 +1771,11 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
                     if (flag1 && this.trackedPlayerMap.putIfAbsent(entityplayer, true) == null) { // Paper
                         this.trackerEntry.b(entityplayer);
+                        getPlayerTrackedEntityMap(entityplayer.getId()).put(this.tracker.getId(), this); // TerraPaper
                     }
                 } else if (this.trackedPlayers.remove(entityplayer)) {
                     this.trackerEntry.a(entityplayer);
+                    getPlayerTrackedEntityMapRemoveQueue(entityplayer.getId()).add(this.tracker.getId()); // TerraPaper
                 }
 
             }
-- 
2.24.1.windows.2

