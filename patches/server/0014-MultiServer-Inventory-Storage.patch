From efd4e8b17ce659d9facfd2640619bb81e17713aa Mon Sep 17 00:00:00 2001
From: JOO200 <github@joo200.de>
Date: Mon, 29 Jun 2020 00:35:49 +0200
Subject: [PATCH] MultiServer Inventory Storage

---
 .../net/minecraft/server/EntityPlayer.java    |  4 +-
 .../java/net/minecraft/server/PlayerList.java |  9 ++--
 .../net/minecraft/server/WorldNBTStorage.java | 47 ++++++++++++++++++-
 .../craftbukkit/entity/CraftPlayer.java       | 14 +++++-
 4 files changed, 68 insertions(+), 6 deletions(-)

diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index eeed8edfdf..33855d5724 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -123,6 +123,8 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     boolean needsChunkCenterUpdate; // Paper - no-tick view distance
 
+    public boolean waitForInventory = true; // TerraPaper - inventory handling
+
     public EntityPlayer(MinecraftServer minecraftserver, WorldServer worldserver, GameProfile gameprofile, PlayerInteractManager playerinteractmanager) {
         super(worldserver, worldserver.getSpawn(), gameprofile);
         this.spawnDimension = World.OVERWORLD;
@@ -2103,7 +2105,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     @Override
     public boolean isFrozen() { // Paper - protected > public
-        return super.isFrozen() || (this.playerConnection != null && this.playerConnection.isDisconnected()); // Paper
+        return super.isFrozen() || this.waitForInventory || (this.playerConnection != null && this.playerConnection.isDisconnected()); // Paper
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 3c5ba8f2fd..e1f058347b 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -468,10 +468,13 @@ public abstract class PlayerList {
         return nbttagcompound1;
     }
 
-    protected void savePlayerFile(EntityPlayer entityplayer) {
+    // TerraPaper start - better inventory handling
+    protected void savePlayerFile(EntityPlayer entityPlayer) { savePlayerFile(entityPlayer, false); }
+
+    protected void savePlayerFile(EntityPlayer entityplayer, boolean releaseLock) {  // TerraPaper end
         if (!entityplayer.getBukkitEntity().isPersistent()) return; // CraftBukkit
         if (!entityplayer.didPlayerJoinEvent) return; // Paper - If we never fired PJE, we disconnected during login. Data has not changed, and additionally, our saved vehicle is not loaded! If we save now, we will lose our vehicle (CraftBukkit bug)
-        this.playerFileData.save(entityplayer);
+        this.playerFileData.save(entityplayer, releaseLock); // TerraPaper - better inventory handling
         ServerStatisticManager serverstatisticmanager = (ServerStatisticManager) entityplayer.getStatisticManager(); // CraftBukkit
 
         if (serverstatisticmanager != null) {
@@ -511,7 +514,7 @@ public abstract class PlayerList {
         }
         // Paper end
 
-        this.savePlayerFile(entityplayer);
+        this.savePlayerFile(entityplayer, true); // TerraPaper - inventory handling
         if (entityplayer.isPassenger()) {
             Entity entity = entityplayer.getRootVehicle();
 
diff --git a/src/main/java/net/minecraft/server/WorldNBTStorage.java b/src/main/java/net/minecraft/server/WorldNBTStorage.java
index 41a1b93a9e..a4d4bcbd08 100644
--- a/src/main/java/net/minecraft/server/WorldNBTStorage.java
+++ b/src/main/java/net/minecraft/server/WorldNBTStorage.java
@@ -26,10 +26,35 @@ public class WorldNBTStorage {
         this.playerDir.mkdirs();
     }
 
-    public void save(EntityHuman entityhuman) {
+    public void save(EntityHuman entityhuman, boolean releaseLock) {
         if(!com.destroystokyo.paper.PaperConfig.savePlayerData) return; // Paper - Make player data saving configurable
         try {
             NBTTagCompound nbttagcompound = entityhuman.save(new NBTTagCompound());
+
+            // TerraPaper start - better inventory storage
+            de.terraconia.terrapaper.NBTStorage storage = de.terraconia.terrapaper.NBTStorageProvider.getCurrentNBTStorage();
+            if(storage != null) {
+                java.util.Collection<String> keys = storage.getKeys();
+                if(!keys.isEmpty()) {
+                    NBTTagCompound pluginSave = new NBTTagCompound();
+                    for (String key : keys) {
+                        NBTBase nbtBase = nbttagcompound.map.get(key);
+                        if(nbtBase != null) pluginSave.map.put(key, nbtBase);
+                    }
+
+                    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
+                    java.io.DataOutputStream stream = new java.io.DataOutputStream(baos);
+                    try {
+                        NBTCompressedStreamTools.writeNBT(pluginSave, (java.io.DataOutput)stream);
+                    } catch (java.io.IOException e) {
+                        WorldNBTStorage.LOGGER.error("Failed to save player data with external storage for {}", entityhuman.getName(), e);
+                    }
+
+                    storage.save(entityhuman.getUniqueID(), baos.toByteArray(), releaseLock);
+                }
+            }
+            // TerraPaper end
+
             File file = File.createTempFile(entityhuman.getUniqueIDString() + "-", ".dat", this.playerDir);
 
             NBTCompressedStreamTools.a(nbttagcompound, (OutputStream) (new FileOutputStream(file)));
@@ -71,6 +96,26 @@ public class WorldNBTStorage {
                 file.renameTo( new File( file.getPath() + ".offline-read" ) );
             }
             // Spigot End
+
+            // TerraPaper start - better inventories
+            NBTTagCompound storageCompound = null;
+            de.terraconia.terrapaper.NBTStorage storage = de.terraconia.terrapaper.NBTStorageProvider.getCurrentNBTStorage();
+            if (storage != null) {
+                try {
+                    byte[] data = storage.load(entityhuman.getUniqueID());
+                    java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(data);
+                    java.io.DataInputStream stream = new java.io.DataInputStream(bais);
+                    storageCompound = NBTCompressedStreamTools.readNBT(stream);
+                    if(entityhuman instanceof EntityPlayer) ((EntityPlayer) entityhuman).waitForInventory = false;
+                } catch (de.terraconia.terrapaper.NBTStorage.NBTStorageNotReady ignored) {
+                    // should be completed by the plugin in a later stage
+                }
+            }
+            if(storageCompound != null) {
+                if(nbttagcompound == null) nbttagcompound = storageCompound;
+                else nbttagcompound.map.putAll(storageCompound.map);
+            }
+            // TerraPaper - end
         } catch (Exception exception) {
             WorldNBTStorage.LOGGER.warn("Failed to load player data for {}", entityhuman.getDisplayName().getString());
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index db617e04fe..238c5c2aba 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -851,7 +851,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void saveData() {
-        server.getHandle().playerFileData.save(getHandle());
+        server.getHandle().playerFileData.save(getHandle(), false); // TerraPaper - inventory handling
     }
 
     @Deprecated
@@ -2128,4 +2128,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return spigot;
     }
     // Spigot end
+
+    // TerraPaper start - better inventory handling
+    @Override
+    public boolean isWaitingForInventory() {
+        return getHandle().waitForInventory;
+    }
+
+    @Override
+    public void setWaitingForInventory(boolean waitingForInventory) {
+        getHandle().waitForInventory = waitingForInventory;
+    }
+    // TerraPaper end
 }
-- 
2.24.1.windows.2

